WHEN A COLLECTION IS WRAPPED IN A STREAM, IT BECOMES POSSIBLE TO RAPIDLY MAKE TRANSFORMATIONS AND EXTRACT 
INFORMATION IN WAYS THAT WOULD BE MUCH LESS EFFICIENT, MAINTAINABLE, AND UNDERSTANDABLE WITHOUT THE USE OF STREAMS. 
IN THIS SENSE, STREAMS IN JAVA REPRESENT A DEEPER LEVEL OF INTELLIGENCE OF THE CONCEPT OF “COLLECTION” THAT HAS BEEN 
IMPLEMENTED IN THE JAVA LANGUAGE. WHEN INTELLIGENCE EXPANDS, CHALLENGES AND TASKS THAT SEEMED DIFFICULT AND 
TIME-CONSUMING BEFORE, CAN BECOME EFFORTLESS AND MEET WITH CONSISTENT SUCCESS. THIS IS ONE OF THE DOCUMENTED BENEFITS 
OF TM PRACTICE.

GENERICS
JAVA GENERICS FACILITATE STRONGER TYPE-CHECKING, MAKING IT POSSIBLE TO CATCH POTENTIAL CASTING ERRORS AT COMPILE 
TIME (RATHER THAN AT RUNTIME), AND IN MANY CASES ELIMINATE THE NEED FOR DOWNCASTING. GENERICS ALSO MAKE IT POSSIBLE 
TO SUPPORT THE MOST GENERAL POSSIBLE API FOR METHODS THAT CAN BE GENERALIZED. WE SEE THIS IN SIMPLE METHODS LIKE MAX 
AND SORT, AND ALSO IN THE NEW STREAM METHODS LIKE FILTER AND MAP. GENERICS INVOLVE TYPE VARIABLES THAT CAN STAND FOR 
ANY POSSIBLE TYPE; IN THIS SENSE THEY EMBODY A UNIVERSAL QUALITY. YET, IT IS BY VIRTUE OF THIS UNIVERSAL QUALITY THAT 
WE ARE ABLE TO SPECIFY PARTICULAR TYPES (INSTEAD OF USING A RAW LIST, WE CAN USE LIST<T>, WHICH ALLOWS US TO SPECIFY 
A LIST OF STRINGS – LIST<STRING> -- RATHER THAN A LIST OF OBJECTS, AS WE HAVE TO DO WITH THE RAW LIST). THIS SHOWS HOW 
THE LIVELY PRESENCE OF THE UNIVERSAL SHARPENS AND ENHANCES THE PARTICULARS OF INDIVIDUAL EXPRESSIONS. 
LIKEWISE, CONTACT WITH THE UNIVERSAL LEVEL OF INTELLIGENCE SHARPENS AND ENHANCES INDIVIDUAL TRAITS.

GENERIC METHODS MAKE IT POSSIBLE TO CREATE GENERAL-PURPOSE METHODS IN JAVA BY DECLARING AND USING ONE OR MORE TYPE 
VARIABLES IN THE METHOD. THIS ALLOWS A USER TO MAKE USE OF THE METHOD USING ANY DATA TYPE THAT IS CONVENIENT, 
WITH FULL COMPILER SUPPORT FOR TYPE-CHECKING. LIKEWISE, WHEN INDIVIDUAL AWARENESS HAS INTEGRATED INTO ITS DAILY 
FUNCTIONING THE UNIVERSAL VALUE OF TRANSCENDENTAL CONSCIOUSNESS, THE AWARENESS IS MAXIMALLY FLEXIBLE, 
ABLE TO FLOW IN WHATEVER DIRECTION IS REQUIRED AT THE MOMENT, FREE OF RIGIDITY AND DOMINANCE OF BOUNDARIES.

THE GET AND PUT RULE DESCRIBES CONDITIONS UNDER WHICH A PARAMETRIZED TYPE SHOULD BE USED ONLY FOR READING ELEMENTS 
(WHEN USING A LIST IS OF TYPE ? EXTENDS T), OTHER CONDITIONS UNDER WHICH THE PARAMETRIZED TYPE SHOULD BE USED ONLY FOR 
INSERTING ELEMENTS (WHEN USING A LIST OF TYPE 
? SUPER T), AND STILL OTHER CONDITIONS UNDER WHICH THE PARAMETRIZED TYPE CAN DO BOTH (WHEN NO WILDCARD IS USED). THE GET
 AND PUT PRINCIPLE BRINGS TO LIGHT THE FUNDAMENTAL DYNAMICS OF EXISTENCE: THERE IS DYNAMISM (CORRESPONDING TO PUT); 
 THERE IS SILENCE (CORRESPONDING TO GET) AND THERE IS WHOLENESS, WHICH UNIFIES THESE TWO OPPOSING NATURES 
 (CORRESPONDING TO BOTH).

//INTERFACES
INTERFACES ARE USED IN JAVA TO SPECIFY PUBLICLY AVAILABLE SERVICES IN THE FORM OF METHOD DECLARATIONS. 
A CLASS THAT IMPLEMENTS SUCH AN INTERFACE MUST MAKE EACH OF THE METHODS OPERATIONAL. INTERFACES MAY BE USED POLYMORPHICALLY, 
IN THE SAME WAY AS A SUPERCLASS IN AN INHERITANCE HIERARCHY. BECAUSE MANY INTERFACES CAN BE IMPLEMENTED BY THE SAME CLASS, 
INTERFACES PROVIDE A SAFE ALTERNATIVE TO MULTIPLE INHERITANCE. JAVA 8 NOW SUPPORTS STATIC AND DEFAULT METHODS IN AN INTERFACE,
 WHICH MAKE INTERFACES EVEN MORE FLEXIBLE: FOR INSTANCE, NEW PUBLIC OPERATIONS CAN BE ADDED TO 
 LEGACY INTERFACES WITHOUT BREAKING CODE (AS WAS DONE WITH THE FOREACH METHOD IN THE ITERABLE INTERFACE). 

THE CONCEPT OF AN INTERFACE IS ANALOGOUS TO THE CREATION ITSELF – THE CREATION MAY BE VIEWED AS AN “INTERFACE”
 TO THE UNDIFFERENTIATED FIELD OF PURE CONSCIOUSNESS; EACH OBJECT AND AVENUE OF ACTIVITY IN THE CREATION SERVES
  AS A REMINDER AND EMBODIMENT OF THE ULTIMATE REALITY. 
  
//BEST PRACTICES
ASSOCIATED WITH EXCEPTION-HANDLING IN JAVA ARE MANY WELL-KNOWN BEST-PRACTICES. FOR EXAMPLE: EXCEPTIONS THAT
 CAN BE CAUGHT AND HANDLED – CHECKED EXCEPTIONS – REFLECT THE PHILOSOPHY THAT, IF A MISTAKE CAN BE CORRECTED 
 DURING EXECUTION OF AN APPLICATION, THIS IS A BETTER RESULT THAN SHUTTING THE APPLICATION DOWN COMPLETELY.
  SECONDLY, ONE SHOULD NEVER LEAVE A CAUGHT EXCEPTION UNHANDLED (BY LEAVING A CATCH BLOCK EMPTY). 
  THIRD, ONE SHOULD NEVER ASK A CATCH BLOCK TO CATCH EXCEPTIONS OF TYPE EXCEPTION BECAUSE DOING SO TENDS TO BE MEANINGLESS. 
LIKEWISE, IN LIFE, IT IS BETTER NOT TO MAKE MISTAKES, BUT, IF A MISTAKE IS MADE, IT IS BEST TO HANDLE IT,
 TO APOLOGIZE, SO THAT THE SITUATION CAN BE REPAIRED; IT IS NEVER A GOOD IDEA TO SIMPLY “IGNORE” 
 A WRONGDOING THAT ONE HAS DONE. REPAIRING A WRONGDOING REQUIRES PROPER USE OF SPEECH; 
 AN “APOLOGY” THAT DOES NOT REALLY ADDRESS THE ISSUE MAY BE TOO GENERAL AND MAY DO MORE HARM THAN GOOD.

Java's new try-with-resources construct handles the complex logic behind exception-handling when the 
process requires that a resource be "closed" after its use. Earlier versions of Java required developers 
to handle this situation with an error-prone imperative programming style; Java's new approach is declarative: 
The developer just tells the runtime which resources will be used and the runtime takes care of the close operations, 
including exception-handling. This effortless approach to handling code has a parallel in the domain of 
human life: When individual awareness is sufficiently attuned to the deeper levels of consciousness, 
less effort is required to achieve significant success.

Best practices in the world of OO programming are a way of ensuring quality in code. 
Code that adheres to best practices tends to be easier to understand, easier to maintain, 
more capable of adapting to change in the face of changing requirements and new feature requests,
and more reusable for other projects. This simple theme is reflected in individual life. There are laws governing life, 
both physical laws and laws pertaining to all kinds of relationships and interactions. 
When life flows in accordance with the laws of nature, life is supported for success and fulfillment. 
When awareness becomes established at its deepest level, actions and behavior springing from this profound quality 
of awareness spontaneously are in accord with the laws of nature.    



